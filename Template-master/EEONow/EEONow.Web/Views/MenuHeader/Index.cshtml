@using Kendo.Mvc.UI
@using EEONow.Utilities;
@{
    ViewBag.Title = "Menu Header List";
    Layout = "~/Views/Shared/_MainLayout.cshtml";
    var LoginInfo = AppUtility.DecryptCookie();
}
<link href="~/Content/kendo/kendo.common.min.css" rel="stylesheet" type="text/css" />
<link href="~/Content/kendo/kendo.mobile.all.min.css" rel="stylesheet" type="text/css" />
<link href="~/Content/kendo/kendo.default.min.css" rel="stylesheet" type="text/css" />
<script src="~/Scripts/kendo/jquery.min.js"></script>
<script src="~/Scripts/kendo/jszip.min.js"></script>
<script src="~/Scripts/kendo/kendo.all.min.js"></script>
<script src="~/Scripts/kendo/kendo.aspnetmvc.min.js"></script>
<script src="@Url.Content("~/Scripts/kendo.modernizr.custom.js")"></script>
@*<link href="~/Content/kendo/kendo.material.min.css" rel="stylesheet" />*@
<style>
    .k-button.k-button-icontext .k-icon {
        vertical-align: middle !important;
        margin: 0 3px 0 0 !important;
    }

    .k-edit-form-container {
        width: auto;
    }

    .k-filtercell, .k-filtercell .k-widget {
        width: 110%;
    }
</style>
<h2 class="main_title_row">Menu Header List</h2>
<div id="SearchPannel">
    <div class="row">

        <div style='@(LoginInfo.Roles== "DefinedSoftwareAdministrator"?"display:block": "display:none")' class="col-lg-6">Organization </div>
        <div class='@(LoginInfo.Roles== "DefinedSoftwareAdministrator"?"col-lg-6": "col-lg-12")'>Role</div>
        <div style='@(LoginInfo.Roles== "DefinedSoftwareAdministrator"?"display:block": "display:none")' class="col-lg-6">
            @(Html.Kendo().DropDownList()
                  .Name("organization")
                  .HtmlAttributes(new { style = "width:100%" })
                  .DataTextField("OrganizationName")
                  .DataValueField("OrganizationId")
                  .DataSource(source =>
                  {
                      source.Read(read =>
                      {
                          read.Action("GetOrganizationsList", "EEOGenderCompensationReport");
                      });
                  })
            )
        </div>

     
        <div class='@(LoginInfo.Roles== "DefinedSoftwareAdministrator"?"col-lg-6": "col-lg-6")'>
            @(Html.Kendo().DropDownList()
              .Name("FilterRoleId")
              .HtmlAttributes(new { style = "width:100%" })
              .OptionLabel("--Select Role--")
              .DataTextField("RoleName")
              .DataValueField("RoleId")
              .DataSource(source =>
              {
                  source.Read(read =>
                  {
                      read.Action("GetRolesList", "MenuHeader").Data("filterRoles"); ;
                  }).ServerFiltering(true);
              })
              .Events(e => e.Change("BindGrid").DataBound("BindGrid"))
              .Enable(false)
              .AutoBind(false)
              .CascadeFrom("organization")
            )
        </div>
    </div>
</div>
<br />
@(Html.Kendo().Grid<EEONow.Models.MenuHeaderModel>()
    .Name("grid")
    .Columns(columns =>
    {
        columns.Bound(p => p.Name).Width(120).Filterable(filterable => filterable.Cell(e => e.Operator("contains").SuggestionOperator(FilterType.Contains).ShowOperators(false)));
        //columns.Bound(p => p.MenuKey).Width(120).Filterable(false);
        columns.Bound(p => p.MenuController).Width(120).Filterable(false);
        columns.Bound(p => p.MenuAction).Width(120).Filterable(false);
        columns.Bound(p => p.SortOrder).Width(120).Filterable(false);
        columns.Bound(p => p.IsHeader).Width(120).Filterable(false);
        columns.Bound(p => p.IsActive).Width(120).Filterable(false);
        columns.ForeignKey(p => p.OrganizationId, (System.Collections.IEnumerable)ViewBag.OrganisationList, "Value", "Text").Width(300).Title("Organization");
        columns.ForeignKey(p => p.RoleId, (System.Collections.IEnumerable)ViewBag.RoleList, "Value", "Text").Title("Role").Width(300).Filterable(false);
        columns.Bound(p => p.ListMenu).ClientTemplate("#= rendermultiselecttext(data.ListMenu) #").Width(500).Filterable(false);
        columns.Command(command => { command.Edit(); }).Width(200);
    })
    .ToolBar(toolbar => toolbar.Create())
    .Editable(editable => editable.Mode(GridEditMode.InLine).Window(w => w.Title("Edit Menu Header").Width(500))).Events(e => e.Edit("onPopOpen"))
    .Pageable()
    .Sortable()
    .Scrollable()
    .Filterable(ftb => ftb
    .Mode(GridFilterMode.Row)
    .Extra(false)
    )
     .AutoBind(false)
    .HtmlAttributes(new { style = "height:550px;" })
    .DataSource(dataSource => dataSource
        .Ajax()
        .PageSize(20)
        .Events(events =>
        {
            //events.Error("error_handler");
            events.RequestEnd("onRequestEnd");
        })
        .Model(model => model.Id(p => p.MenuHeaderID_PK))
        .Create(update => update.Action("CreateMenuHeader", "MenuHeader"))
        //.Read(read => read.Action("BindMenuHeaderModel", "MenuHeader"))
        .Read(read => read.Action("BindMenuHeaderModel", "MenuHeader").Data("HeaderMenuSearchModel"))
        .Update(update => update.Action("UpdateMenuHeader", "MenuHeader"))
    //.Destroy(update => update.Action("Destroy", "Home"))
    )
)

@section css{
    <link href="~/Content/Custom/login.css" rel="stylesheet" />
    <link href="~/Content/alertifyjs/css/alertify.rtl.css" rel="stylesheet" />
}
@section scripts{
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
    <script src="~/Content/alertifyjs/alertify.js"></script>
    <script src="~/Content/alertifyjs/alertify.min.js"></script>
    <script type="text/javascript">

        //EmployeeSearchModel
        function HeaderMenuSearchModel() {
            return {
                organizationId: $("#organization").val(),
                FilterRoleId: $("#FilterRoleId").val()
            }
        }
        function filterRoles() {
            return {
                organization: $("#organization").val()
            };
        }
        function onRequestEnd(e, status) {

            if (e.response.Errors) {
                var grid = $("#grid").data("kendoGrid");
                grid.cancelChanges();
                var message = "";
                $.each(e.response.Errors, function (key, value) {
                    if ('errors' in value) {
                        $.each(value.errors, function () {
                            message += this + "\n";
                        });
                    }
                });
                alertify.error(message);
            }
            //Check request type
            if (e.type == "create" && !e.response.Errors) {
                alertify.success("Record successfully created.");
            }
            if (e.type == "update" && !e.response.Errors) {
                alertify.success("Record successfully updated.");
            }
        }
        function onPopOpen(e) {
            if (e.model.id == 0) {
                $(".k-window-title").html('Add Firms');
                $(".k-grid-update").html('<span class="k-icon k-i-check"></span>Save');
            }else
            {
             if ('@LoginInfo.IsEdit.ToString()' == "True")
             {
                 $(".k-edit-form-container .k-edit-buttons").show();
             }
             else {
                 $(".k-edit-form-container .k-edit-buttons").hide();
                 $(".k-edit-form-container .k-edit-buttons").html(''); $(".k-window-title").html("View Detail");
             }
            }
            $.ajax({
                url: '/MenuHeader/GetRolesList',
                method: 'get',
                async: false,
                data: { 'organization': $("#organization").val() },
                success: function (res) {
                    $("#RoleId").kendoDropDownList({
                        //optionLabel: "Select Project Task ID",
                        dataTextField: "RoleName",
                        dataValueField: "RoleId",
                        dataSource: res
                    }).data("kendoDropDownList");
                    var ProjectTaskID_Dropdownlist = $("#RoleId").data("kendoDropDownList");
                  //  ProjectTaskID_Dropdownlist.select(0);
                    ProjectTaskID_Dropdownlist.trigger("change");
                },
                erorr: function (err) {
                    console.log(err);
                }
            });


            $("#OrganizationId").change(function (e) {
                $.ajax({
                    url: '/MenuHeader/GetRolesList',
                    method: 'get',
                    async: false,
                    data: { 'organization': $("#OrganizationId").val() },
                    success: function (res) {
                        $("#RoleId").kendoDropDownList({
                            //optionLabel: "Select Project Task ID",
                            dataTextField: "RoleName",
                            dataValueField: "RoleId",
                            dataSource: res
                        }).data("kendoDropDownList");
                        var ProjectTaskID_Dropdownlist = $("#RoleId").data("kendoDropDownList");
                       // ProjectTaskID_Dropdownlist.select(0);
                        ProjectTaskID_Dropdownlist.trigger("change");
                    },
                    erorr: function (err) {
                        console.log(err);
                    }
                });
            });
            //
        }

        function BindGrid(e) {
            //ddlItem = this.text();
            //if (~ddlItem.indexOf("Delete")) {
            //    alertify.error("Selected version employee data was deleted due to Error in records")
            //}
            var grid = $("#grid").data("kendoGrid");
            grid.dataSource.read();

        }
        function rendermultiselecttext(selectlistarray) {
            if (selectlistarray != undefined && selectlistarray[0] != undefined) {
                var displaytext;
                $.each(selectlistarray, function (index) {
                    if (displaytext == undefined) {
                        displaytext = selectlistarray[index].Text + ',';
                    } else {
                        displaytext = displaytext + selectlistarray[index].Text + ',';
                    }
                });
                return displaytext.slice(0, -1);

            }
            else {
                return "";
            }
        }
    </script>

}